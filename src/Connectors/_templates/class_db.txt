<?php
namespace [[namespace]];

[[use]]

use QuickDRY\Connectors\SQL_Query;
use QuickDRY\Utilities\Dates;
use QuickDRY\Utilities\HTTP;
use QuickDRY\Web\ElementID;
use QuickDRYInstance\Common\QuickDRYUser;
use QuickDRY\Connectors\QueryExecuteResult;
use DateTime;
use Exception;

/**
 *
 * [[c_name]]
 * @author Ben Kucenski <bkucenski@gmail.com>
 * generated by QuickDRY
 *
[[class_props]];
 *
 */

class db_[[c_name]] extends [[DatabaseClassName]]
{
    public static array $_primary = [[primary]];
    public static array $_unique = [
    [[unique]]
    ];

    public static array $_indexes = [
    [[indexes]]
    ];

    protected static string $database = [[database]];
    protected static string $table = '[[table_name]]';
    protected static string $DatabasePrefix = '[[DatabasePrefix]]';
    protected static string $DatabaseTypePrefix = '[[DatabaseTypePrefix]]';
    protected static int $LowerCaseTable = [[LowerCaseTable]];

    protected static array $prop_definitions = [
        [[prop_definitions]]
    ];

    [[foreign_key_props]]

    /**
     * @param string $name
     * @return mixed
     */
    public function __get(string $name)
    {
        [[gets]]

        return parent::__get($name);
    }

    /**
     * @param string $name
     * @param mixed $value
     * @return mixed
     */
    public function __set(string $name, mixed $value)
    {
        [[sets]]

        return parent::__set($name, $value);
    }

    /**
     * @param bool $return_query
     * @return array|SQL_Query
     * @throws Exception
     */
    public function Insert(bool $return_query = false): SQL_Query|array
    {
        return $this->_Insert($return_query);
    }

    /**
     * @param bool $return_query
     * @return array|SQL_Query
     * @throws Exception
     */
    public function Update(bool $return_query = false): SQL_Query|array
    {
        return $this->_Update($return_query);
    }

    /**
     * @param array $req
     * @param bool $save
     * @param bool $keep_existing_values
     * @return QueryExecuteResult
     */
    public function FromRequest(array $req, bool $save = true, bool $keep_existing_values = false): QueryExecuteResult
    {
        return parent::FromRequest($req, $save, $keep_existing_values);
    }

    /**
     * @param $search
     * @param QuickDRYUser $user
     */
    public static function Suggest($search, QuickDRYUser $user)
    {
        HTTP::ExitJSON(['error' => 'Suggest not implemented', 'search' => $search, 'user' => $user]);
    }

    /**
     * @return bool
     */
    public function IsReferenced(): bool
    {
        return [[IsReferenced]];
    }

    /**
     * @param QuickDRYUser|null $user
     * @return bool
     */
    public function VisibleTo(?QuickDRYUser $user): bool
    {
        if(is_null($user)) {
            return false;
        }

        if($user->Is(ROLE_ID_ADMIN)) {
            return true;
        }

        [[HasUserLink]]

        return false;
    }

    /**
     * @param QuickDRYUser|null $user
     * @return bool
     */
    public function CanDelete(?QuickDRYUser $user): bool
    {
        if(is_null($user)) {
            return false;
        }

        if($user->Is(ROLE_ID_ADMIN)) {
            return true;
        }

        [[HasUserLink]]

        return false;
    }

    /**
     * @param string $column_name
     * @return string
     */
    public static function ColumnNameToNiceName(string $column_name): string
    {
        return isset(static::$prop_definitions[$column_name]) ? static::$prop_definitions[$column_name]['display'] : '<i>unknown</i>';
    }

    /**
     * @param string $column_name
     * @param null $value
     * @param false $force_value
     * @return mixed
     */
    public function ValueToNiceValue(string $column_name, $value = null, bool $force_value = false): mixed
    {
        if($value instanceof DateTime) {
            $value = Dates::Timestamp($value, '');
        }

        if($value || $force_value) {
            return $value;
        }

        if($this->$column_name instanceof DateTime) {
            return Dates::Timestamp($this->$column_name, '');
        }

        return $this->$column_name;
    }

    /**
     * @param string $column_name
     * @return bool
     */
    public static function IgnoreColumn(string $column_name): bool
    {
        return in_array($column_name, ['id', 'created_at', 'created_by_id', 'edited_at', 'edited_by_id']);
    }

    /**
     * @param array|null $where
     *
     * @return static|null
     */
    public static function Get(array $where = null): ?static
    {
      return parent::Get($where);
    }

    /**
     * @param array|null $where
     * @param array|null $order_by
     * @param int|null $limit
     *
     * @return static[]|null
     */
    public static function GetAll(array $where = null, array $order_by = null, int $limit = null): ?array
    {
		  return parent::GetAll($where, $order_by, $limit);
    }


  /**
   * @param string|null $selected
   * @param ElementID|null $id
   * @return string
   */
  public static function Select(string $selected = null, ElementID $id = null): string
  {
    return print_r(['Select Not Implemented', $selected, $id], true);
  }
}